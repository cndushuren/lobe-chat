name: Sync Releases Docker Image

permissions:
  contents: write
  issues: write
  actions: write

on:
  schedule:
    - cron: '20 */6 * * *' # every 6 hours
  workflow_dispatch: # 手动触发

jobs:
  sync-releases:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout this repository
      uses: actions/checkout@v4

    - name: Fetch latest release from upstream
      id: fetch-latest-release
      run: |
        LATEST_RELEASE=$(curl -s https://api.github.com/repos/lobehub/lobe-chat/releases/latest)
        TAG_NAME=$(echo $LATEST_RELEASE | jq -r .tag_name)
        RELEASE_NAME=$(echo $LATEST_RELEASE | jq -r .name)
        RELEASE_BODY=$(echo $LATEST_RELEASE | jq -r .body)
        echo "::set-output name=tag_name::$TAG_NAME"
        echo "::set-output name=release_name::$RELEASE_NAME"
        echo "::set-output name=release_body::$RELEASE_BODY"

    - name: Fetch latest release from this repository
      id: fetch-current-release
      run: |
        CURRENT_RELEASE=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest)
        CURRENT_TAG_NAME=$(echo $CURRENT_RELEASE | jq -r .tag_name)
        echo "::set-output name=tag_name::$CURRENT_TAG_NAME"
      continue-on-error: true # 如果没有发布过release，则忽略错误

    - name: Compare versions
      id: compare-versions
      run: |
        if [ "${{ steps.fetch-latest-release.outputs.tag_name }}" != "${{ steps.fetch-current-release.outputs.tag_name }}" ]; then
          echo "New release found."
          echo "::set-output name=release_created::true"
          echo "RELEASE_CREATED_ENV=true" >> $GITHUB_ENV
        else
          echo "No new release found."
          echo "::set-output name=release_created::false"
          echo "RELEASE_CREATED_ENV=false" >> $GITHUB_ENV
        fi

    - name: Create release
      id: create-release
      if: steps.fetch-latest-release.outputs.tag_name != steps.fetch-current-release.outputs.tag_name
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.fetch-latest-release.outputs.tag_name }}
        release_name: ${{ steps.fetch-latest-release.outputs.release_name }}
        body: ${{ steps.fetch-latest-release.outputs.release_body }}
        draft: false
        prerelease: false

    - name: Debug output
      run: |
        echo "Release created: ${{ steps.compare-versions.outputs.release_created }}"
        echo "RELEASE_CREATED_ENV: ${{env.RELEASE_CREATED_ENV}}"
        echo "Release created1: ${{ sync-releases.outputs.release_created }}"
    outputs:
      release_created: ${{ steps.compare-versions.outputs.release_created }}
      RELEASE_CREATED_ENV: ${{ steps.compare-versions.outputs.RELEASE_CREATED_ENV }}

  publish-docker-image:
    runs-on: ubuntu-latest
    # needs: sync-releases
    # if: needs.sync-releases.outputs.release_created == 'true'
    steps:
      - name: Debug needs output
        run: |
          echo "RELEASE_CREATED_ENV output: ${{ env.RELEASE_CREATED_ENV }}"
          echo "Release created: ${{needs.sync-releases.outputs.release_created}}"
          echo "Release created: ${{needs.sync-releases.outputs.RELEASE_CREATED_ENV}}"

      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: lizhz/lobe-chat
          tags: |
            type=raw,value=latest
            type=ref,event=tag

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
